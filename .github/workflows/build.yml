name: CI

on:
  push:
  pull_request:
  
env:
  DOTNET_NOLOGO: true

jobs:
  build_solution:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore AuthorizationServer.sln
    - name: Build
      run: dotnet build AuthorizationServer.sln --no-restore
    - name: Test
      run: dotnet test AuthorizationServer.sln --no-build --verbosity normal
  
  build_documentation:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install and Build
        run: |
          cd Documentation
          npm install
          npm run build

  build_dockerfiles:
    name: Build Dockerfiles
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build Images
      run: |
        docker build . -f Authorization/WebApp/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/authorizationserver:latest
        docker build . -f Authorization/ConfigurationApp/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/configurationapp:latest
        docker build . -f Clients/WebApp/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/webapp:latest
        docker build . -f ProtectedResources/WeatherService/Api/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/weatherservice:latest

  sonarscan:
    name: SonarScan
    needs:
      - build_solution
      - build_documentation
      - build_dockerfiles
    if: github.event_name == 'pull_request' || github.ref_name == 'master'
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Install Dotnet Coverage Tool
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"jokk-itu_authserver" /o:"jokk-itu" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet clean AuthorizationServer.sln
          dotnet restore AuthorizationServer.sln
          dotnet build AuthorizationServer.sln --no-restore
          dotnet-coverage collect 'dotnet test AuthorizationServer.sln --no-restore' -f xml  -o 'coverage.xml'
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
