// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ClaimConsentGrant", b =>
                {
                    b.Property<long>("ConsentGrantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsentedClaimsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsentGrantsId", "ConsentedClaimsId");

                    b.HasIndex("ConsentedClaimsId");

                    b.ToTable("ConsentedGrantClaims", (string)null);
                });

            modelBuilder.Entity("ClientContact", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContactsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "ContactsId");

                    b.HasIndex("ContactsId");

                    b.ToTable("ClientContacts", (string)null);
                });

            modelBuilder.Entity("ClientGrantType", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GrantTypesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "GrantTypesId");

                    b.HasIndex("GrantTypesId");

                    b.ToTable("ClientGrantTypes", (string)null);
                });

            modelBuilder.Entity("ClientResponseType", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseTypesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "ResponseTypesId");

                    b.HasIndex("ResponseTypesId");

                    b.ToTable("ClientResponseTypes", (string)null);
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScopesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ClientScopes", (string)null);
                });

            modelBuilder.Entity("ClientSession", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SessionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("SessionClients", (string)null);
                });

            modelBuilder.Entity("Domain.AuthorizationCodeGrant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRedeemed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nonce")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.ToTable("AuthorizationCodeGrants", (string)null);
                });

            modelBuilder.Entity("Domain.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);
                });

            modelBuilder.Entity("Domain.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientProfile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenEndpointAuthMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TosUri")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Domain.ConsentGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsentGrants", (string)null);
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Domain.GrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GrantTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "authorization_code"
                        },
                        new
                        {
                            Id = 2,
                            Name = "refresh_token"
                        });
                });

            modelBuilder.Entity("Domain.Jwk", b =>
                {
                    b.Property<long>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Exponent")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Modulus")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PrivateKey")
                        .HasColumnType("BLOB");

                    b.HasKey("KeyId");

                    b.ToTable("Jwks", (string)null);
                });

            modelBuilder.Entity("Domain.RedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RedirectUris", (string)null);
                });

            modelBuilder.Entity("Domain.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("Domain.ResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResponseTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "code"
                        });
                });

            modelBuilder.Entity("Domain.Scope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ConsentGrantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsentGrantId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Scopes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "openid"
                        },
                        new
                        {
                            Id = 2,
                            Name = "email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "profile"
                        },
                        new
                        {
                            Id = 4,
                            Name = "offline_access"
                        },
                        new
                        {
                            Id = 5,
                            Name = "phone"
                        });
                });

            modelBuilder.Entity("Domain.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Domain.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TokenType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tokens", (string)null);

                    b.HasDiscriminator<int>("TokenType").HasValue(0);
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResourceScope", b =>
                {
                    b.Property<string>("ResourcesId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScopesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResourcesId", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ResourceScopes", (string)null);
                });

            modelBuilder.Entity("Domain.AccessToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AccessToken_ClientId");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AccessToken_SessionId");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AccessToken_UserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Domain.ClientRegistrationToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClientRegistrationToken_ClientId");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("Domain.IdToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasColumnName("IdToken_ClientId");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdToken_SessionId");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("IdToken_UserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.RefreshToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Domain.ResourceRegistrationToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<string>("ResourceId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ResourceId");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Domain.ScopeRegistrationToken", b =>
                {
                    b.HasBaseType("Domain.Token");

                    b.Property<int?>("ScopeId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ScopeId");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("ClaimConsentGrant", b =>
                {
                    b.HasOne("Domain.ConsentGrant", null)
                        .WithMany()
                        .HasForeignKey("ConsentGrantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Claim", null)
                        .WithMany()
                        .HasForeignKey("ConsentedClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientContact", b =>
                {
                    b.HasOne("Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientGrantType", b =>
                {
                    b.HasOne("Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.GrantType", null)
                        .WithMany()
                        .HasForeignKey("GrantTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientResponseType", b =>
                {
                    b.HasOne("Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ResponseType", null)
                        .WithMany()
                        .HasForeignKey("ResponseTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.HasOne("Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientSession", b =>
                {
                    b.HasOne("Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AuthorizationCodeGrant", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("AuthorizationCodeGrants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Session", "Session")
                        .WithMany("AuthorizationCodeGrants")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.ConsentGrant", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RedirectUri", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Scope", b =>
                {
                    b.HasOne("Domain.ConsentGrant", null)
                        .WithMany("Scopes")
                        .HasForeignKey("ConsentGrantId");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Session", "Session")
                        .WithOne("User")
                        .HasForeignKey("Domain.User", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceScope", b =>
                {
                    b.HasOne("Domain.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AccessToken", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("AccessTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Session", "Session")
                        .WithMany("AccessTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ClientRegistrationToken", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("ClientRegistrationTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.IdToken", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("IdTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Session", "Session")
                        .WithMany("IdTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RefreshToken", b =>
                {
                    b.HasOne("Domain.Client", "Client")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Session", "Session")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ResourceRegistrationToken", b =>
                {
                    b.HasOne("Domain.Resource", "Resource")
                        .WithMany("ResourceRegistrationTokens")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Domain.ScopeRegistrationToken", b =>
                {
                    b.HasOne("Domain.Scope", "Scope")
                        .WithMany("ScopeRegistrationTokens")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Domain.Client", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthorizationCodeGrants");

                    b.Navigation("ClientRegistrationTokens");

                    b.Navigation("ConsentGrants");

                    b.Navigation("IdTokens");

                    b.Navigation("RedirectUris");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.ConsentGrant", b =>
                {
                    b.Navigation("Scopes");
                });

            modelBuilder.Entity("Domain.Resource", b =>
                {
                    b.Navigation("ResourceRegistrationTokens");
                });

            modelBuilder.Entity("Domain.Scope", b =>
                {
                    b.Navigation("ScopeRegistrationTokens");
                });

            modelBuilder.Entity("Domain.Session", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthorizationCodeGrants");

                    b.Navigation("IdTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("ConsentGrants");
                });
#pragma warning restore 612, 618
        }
    }
}
