// <auto-generated />
using System;
using AuthServer.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthServer.TestIdentityProvider.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20240905180332_IncreaseMaxLengthAuthorizationCodeValue")]
    partial class IncreaseMaxLengthAuthorizationCodeValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthServer.Entities.AuthorizationCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationGrantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RedeemedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationGrantId");

                    b.ToTable("AuthorizationCode");
                });

            modelBuilder.Entity("AuthServer.Entities.AuthorizationGrant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AuthTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("MaxAge")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectIdentifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.HasIndex("SubjectIdentifierId");

                    b.ToTable("AuthorizationGrant");
                });

            modelBuilder.Entity("AuthServer.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Claim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "name"
                        },
                        new
                        {
                            Id = 2,
                            Name = "given_name"
                        },
                        new
                        {
                            Id = 3,
                            Name = "family_name"
                        },
                        new
                        {
                            Id = 4,
                            Name = "middle_name"
                        },
                        new
                        {
                            Id = 5,
                            Name = "nickname"
                        },
                        new
                        {
                            Id = 6,
                            Name = "preferred_username"
                        },
                        new
                        {
                            Id = 7,
                            Name = "profile"
                        },
                        new
                        {
                            Id = 8,
                            Name = "picture"
                        },
                        new
                        {
                            Id = 9,
                            Name = "website"
                        },
                        new
                        {
                            Id = 10,
                            Name = "email"
                        },
                        new
                        {
                            Id = 11,
                            Name = "email_verified"
                        },
                        new
                        {
                            Id = 12,
                            Name = "gender"
                        },
                        new
                        {
                            Id = 13,
                            Name = "birthdate"
                        },
                        new
                        {
                            Id = 14,
                            Name = "zoneinfo"
                        },
                        new
                        {
                            Id = 15,
                            Name = "locale"
                        },
                        new
                        {
                            Id = 16,
                            Name = "phone_number"
                        },
                        new
                        {
                            Id = 17,
                            Name = "phone_number_verified"
                        },
                        new
                        {
                            Id = 18,
                            Name = "address"
                        },
                        new
                        {
                            Id = 19,
                            Name = "updated_at"
                        },
                        new
                        {
                            Id = 20,
                            Name = "roles"
                        });
                });

            modelBuilder.Entity("AuthServer.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorizationCodeExpiration")
                        .HasColumnType("int");

                    b.Property<string>("BackchannelLogoutUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultAcrValues")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DefaultMaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("IdTokenEncryptedResponseAlg")
                        .HasColumnType("int");

                    b.Property<int?>("IdTokenEncryptedResponseEnc")
                        .HasColumnType("int");

                    b.Property<int?>("IdTokenSignedResponseAlg")
                        .HasColumnType("int");

                    b.Property<string>("InitiateLoginUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Jwks")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JwksExpiration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JwksExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwksUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PolicyUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int?>("RequestObjectEncryptionAlg")
                        .HasColumnType("int");

                    b.Property<int?>("RequestObjectEncryptionEnc")
                        .HasColumnType("int");

                    b.Property<int?>("RequestObjectSigningAlg")
                        .HasColumnType("int");

                    b.Property<int?>("RequestUriExpiration")
                        .HasColumnType("int");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePushedAuthorizationRequests")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireReferenceToken")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireSignedRequestObject")
                        .HasColumnType("bit");

                    b.Property<int?>("SecretExpiration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SecretExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SubjectType")
                        .HasColumnType("int");

                    b.Property<int>("TokenEndpointAuthMethod")
                        .HasColumnType("int");

                    b.Property<int>("TokenEndpointAuthSigningAlg")
                        .HasColumnType("int");

                    b.Property<string>("TosUri")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserinfoEncryptedResponseAlg")
                        .HasColumnType("int");

                    b.Property<int?>("UserinfoEncryptedResponseEnc")
                        .HasColumnType("int");

                    b.Property<int?>("UserinfoSignedResponseAlg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.ConsentGrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PublicSubjectIdentifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PublicSubjectIdentifierId");

                    b.ToTable("ConsentGrant");
                });

            modelBuilder.Entity("AuthServer.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("AuthServer.Entities.GrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GrantType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "authorization_code"
                        },
                        new
                        {
                            Id = 2,
                            Name = "client_credentials"
                        },
                        new
                        {
                            Id = 3,
                            Name = "refresh_token"
                        });
                });

            modelBuilder.Entity("AuthServer.Entities.Nonce", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationGrantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationGrantId");

                    b.ToTable("Nonce");
                });

            modelBuilder.Entity("AuthServer.Entities.PostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PostLogoutRedirectUri");
                });

            modelBuilder.Entity("AuthServer.Entities.RedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RedirectUri");
                });

            modelBuilder.Entity("AuthServer.Entities.RequestUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RequestUri");
                });

            modelBuilder.Entity("AuthServer.Entities.ResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResponseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "code"
                        });
                });

            modelBuilder.Entity("AuthServer.Entities.Scope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Scope");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "openid"
                        },
                        new
                        {
                            Id = 2,
                            Name = "offline_access"
                        },
                        new
                        {
                            Id = 3,
                            Name = "profile"
                        },
                        new
                        {
                            Id = 4,
                            Name = "address"
                        },
                        new
                        {
                            Id = 5,
                            Name = "email"
                        },
                        new
                        {
                            Id = 6,
                            Name = "phone"
                        },
                        new
                        {
                            Id = 7,
                            Name = "authserver:userinfo"
                        },
                        new
                        {
                            Id = 8,
                            Name = "authserver:register"
                        });
                });

            modelBuilder.Entity("AuthServer.Entities.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PublicSubjectIdentifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicSubjectIdentifierId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("AuthServer.Entities.SubjectIdentifier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubjectIdentifier");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AuthServer.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("NotBefore")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scope")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TokenType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("Token");

                    b.HasDiscriminator<int>("TokenType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClaimConsentGrant", b =>
                {
                    b.Property<int>("ConsentGrantsId")
                        .HasColumnType("int");

                    b.Property<int>("ConsentedClaimsId")
                        .HasColumnType("int");

                    b.HasKey("ConsentGrantsId", "ConsentedClaimsId");

                    b.HasIndex("ConsentedClaimsId");

                    b.ToTable("ClaimConsentGrant");
                });

            modelBuilder.Entity("ClientGrantType", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GrantTypesId")
                        .HasColumnType("int");

                    b.HasKey("ClientsId", "GrantTypesId");

                    b.HasIndex("GrantTypesId");

                    b.ToTable("ClientGrantType");
                });

            modelBuilder.Entity("ClientResponseType", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResponseTypesId")
                        .HasColumnType("int");

                    b.HasKey("ClientsId", "ResponseTypesId");

                    b.HasIndex("ResponseTypesId");

                    b.ToTable("ClientResponseType");
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ScopesId")
                        .HasColumnType("int");

                    b.HasKey("ClientsId", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ClientScope");
                });

            modelBuilder.Entity("ConsentGrantScope", b =>
                {
                    b.Property<int>("ConsentGrantsId")
                        .HasColumnType("int");

                    b.Property<int>("ConsentedScopesId")
                        .HasColumnType("int");

                    b.HasKey("ConsentGrantsId", "ConsentedScopesId");

                    b.HasIndex("ConsentedScopesId");

                    b.ToTable("ConsentGrantScope");
                });

            modelBuilder.Entity("AuthServer.Entities.PairwiseSubjectIdentifier", b =>
                {
                    b.HasBaseType("AuthServer.Entities.SubjectIdentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PublicSubjectIdentifierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ClientId");

                    b.HasIndex("PublicSubjectIdentifierId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AuthServer.Entities.PublicSubjectIdentifier", b =>
                {
                    b.HasBaseType("AuthServer.Entities.SubjectIdentifier");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("AuthServer.Entities.ClientToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.Token");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ClientId");
                });

            modelBuilder.Entity("AuthServer.Entities.GrantToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.Token");

                    b.Property<string>("AuthorizationGrantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AuthorizationGrantId");
                });

            modelBuilder.Entity("AuthServer.Entities.ClientAccessToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.ClientToken");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AuthServer.Entities.RegistrationToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.ClientToken");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("AuthServer.Entities.GrantAccessToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.GrantToken");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("AuthServer.Entities.RefreshToken", b =>
                {
                    b.HasBaseType("AuthServer.Entities.GrantToken");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("AuthServer.Entities.AuthorizationCode", b =>
                {
                    b.HasOne("AuthServer.Entities.AuthorizationGrant", "AuthorizationGrant")
                        .WithMany("AuthorizationCodes")
                        .HasForeignKey("AuthorizationGrantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AuthorizationGrant");
                });

            modelBuilder.Entity("AuthServer.Entities.AuthorizationGrant", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("AuthorizationGrants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.Session", "Session")
                        .WithMany("AuthorizationGrants")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.SubjectIdentifier", "SubjectIdentifier")
                        .WithMany("AuthorizationGrants")
                        .HasForeignKey("SubjectIdentifierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Session");

                    b.Navigation("SubjectIdentifier");
                });

            modelBuilder.Entity("AuthServer.Entities.ConsentGrant", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.PublicSubjectIdentifier", "PublicSubjectIdentifier")
                        .WithMany("ConsentGrants")
                        .HasForeignKey("PublicSubjectIdentifierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("PublicSubjectIdentifier");
                });

            modelBuilder.Entity("AuthServer.Entities.Contact", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.Nonce", b =>
                {
                    b.HasOne("AuthServer.Entities.AuthorizationGrant", "AuthorizationGrant")
                        .WithMany("Nonces")
                        .HasForeignKey("AuthorizationGrantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AuthorizationGrant");
                });

            modelBuilder.Entity("AuthServer.Entities.PostLogoutRedirectUri", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.RedirectUri", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.RequestUri", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("RequestUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.Session", b =>
                {
                    b.HasOne("AuthServer.Entities.PublicSubjectIdentifier", "PublicSubjectIdentifier")
                        .WithMany("Sessions")
                        .HasForeignKey("PublicSubjectIdentifierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("PublicSubjectIdentifier");
                });

            modelBuilder.Entity("ClaimConsentGrant", b =>
                {
                    b.HasOne("AuthServer.Entities.ConsentGrant", null)
                        .WithMany()
                        .HasForeignKey("ConsentGrantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.Claim", null)
                        .WithMany()
                        .HasForeignKey("ConsentedClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientGrantType", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.GrantType", null)
                        .WithMany()
                        .HasForeignKey("GrantTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientResponseType", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.ResponseType", null)
                        .WithMany()
                        .HasForeignKey("ResponseTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsentGrantScope", b =>
                {
                    b.HasOne("AuthServer.Entities.ConsentGrant", null)
                        .WithMany()
                        .HasForeignKey("ConsentGrantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.Scope", null)
                        .WithMany()
                        .HasForeignKey("ConsentedScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthServer.Entities.PairwiseSubjectIdentifier", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("PairwiseSubjectIdentifiers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AuthServer.Entities.PublicSubjectIdentifier", "PublicSubjectIdentifier")
                        .WithMany("PairwiseSubjectIdentifiers")
                        .HasForeignKey("PublicSubjectIdentifierId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("PublicSubjectIdentifier");
                });

            modelBuilder.Entity("AuthServer.Entities.ClientToken", b =>
                {
                    b.HasOne("AuthServer.Entities.Client", "Client")
                        .WithMany("ClientTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AuthServer.Entities.GrantToken", b =>
                {
                    b.HasOne("AuthServer.Entities.AuthorizationGrant", "AuthorizationGrant")
                        .WithMany("GrantTokens")
                        .HasForeignKey("AuthorizationGrantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AuthorizationGrant");
                });

            modelBuilder.Entity("AuthServer.Entities.AuthorizationGrant", b =>
                {
                    b.Navigation("AuthorizationCodes");

                    b.Navigation("GrantTokens");

                    b.Navigation("Nonces");
                });

            modelBuilder.Entity("AuthServer.Entities.Client", b =>
                {
                    b.Navigation("AuthorizationGrants");

                    b.Navigation("ClientTokens");

                    b.Navigation("ConsentGrants");

                    b.Navigation("Contacts");

                    b.Navigation("PairwiseSubjectIdentifiers");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("RedirectUris");

                    b.Navigation("RequestUris");
                });

            modelBuilder.Entity("AuthServer.Entities.Session", b =>
                {
                    b.Navigation("AuthorizationGrants");
                });

            modelBuilder.Entity("AuthServer.Entities.SubjectIdentifier", b =>
                {
                    b.Navigation("AuthorizationGrants");
                });

            modelBuilder.Entity("AuthServer.Entities.PublicSubjectIdentifier", b =>
                {
                    b.Navigation("ConsentGrants");

                    b.Navigation("PairwiseSubjectIdentifiers");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
